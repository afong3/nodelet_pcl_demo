<launch>
  <arg name="gl300" default="false" doc="True if --opengl 300 should be used to launch rviz to avoid rviz bug #1508"/>
  <arg name="vis" default="true" doc="Launch RViZ"/>
  <arg name="source" default="pcd" doc="Source of point cloud: can be kinect, openni, realsense, pcd (for data from files), or none"/>
  <arg name="min_z" default="0.5" doc="Minimum z distance between camera and table" />
  <!-- Kinect like interface -->
  <include if="$(eval source == 'kinect')" file="$(find rgbd_launch)/launch/kinect_frames.launch">
      <arg name="camera" value="camera" />
  </include>

  <!-- Openni standard (such as Asus Xtion) -->
  <include if="$(eval source == 'openni')" file="$(find openni2_launch)/launch/openni2.launch" />


  <!-- intel realsense, which publishes on /camera/depth/color/points instead of /camera/depth/points -->
  <remap from="/camera/depth/color/points" to="/camera/depth/points" />

<include if="$(eval source == 'realsense')" file="$(find realsense2_camera)/launch/rs_camera.launch" >
       <arg name="filters" value="pointcloud" />
  </include>

  <!-- launch the nodelet manager -->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen"/>  

  <!-- pcd reader. this node reads the PCD file and publishes to a desired
       topic. I have rotated the data contained in the original PCD file
       downloaded from the PCL site. In the original PCD file, all data was
       behind the sensor if we consider the frame to be the `camera_depth_optical_frame` -->
  <group ns="pcd_reader" if="$(eval source =='pcd')">
    <node name="pcd_publisher" pkg="pcl_ros" type="pcd_to_pointcloud"
          args="$(find nodelet_pcl_demo)/launch/table_rotated.pcd 0.05">
      <remap from="cloud_pcd" to="/camera/depth/points" />
      <param name="frame_id" value="camera_depth_optical_frame" />
    </node>
  </group>
  
  <!-- crop box filtering.... This throws out data that is far away from the
       table where we are trying to extract data. These values were tuned for
       the PCD file included using rqt_reconfigure.-->
  <group ns="box_filter">
    <node pkg="nodelet" type="nodelet" name="cropbox" args="load pcl/CropBox /pcl_manager" output="screen">
      <remap from="~input" to="/camera/depth/points" />
      <rosparam>
        min_x: -0.25
        max_x: 0.25
        min_y: -0.3
        max_y: 0.1
        min_z: $(arg 0.1)
        max_z: 2.0
      </rosparam>
    </node>
  </group>

  <!-- voxel downsampling... While not strictly necessary, this produces a less
       dense point cloud. This makes it easier for later nodelets to keep up
       with the processing frequency -->
  <group ns="cloud_downsampler">
    <node pkg="nodelet" type="nodelet" name="voxel" args="load pcl/VoxelGrid /pcl_manager" output="screen">
      <remap from="~input" to="/box_filter/cropbox/output" />
      <rosparam>
        leaf_size: 0.01
        filter_field_name: z
        filter_limit_min: -10.0
        filter_limit_max: 10.0
      </rosparam>
    </node>
  </group>
  
  <!-- table extraction... The `~model_type` private parameter was found by
       looking at the `model_types.h` file included in PCL source code
       (available here:
       http://docs.pointclouds.org/1.7.0/model__types_8h_source.html). The `0`
       type corresponds to pcl::SACMODEL_PLANE. -->
  <group ns="normal_segmentation">
    <node pkg="nodelet" type="nodelet" name="segmentation" args="load pcl/SACSegmentation /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <param name="model_type" value="0" type="int" />
      <param name="distance_threshold" value="0.02" type="double" />
    </node>
  </group>

  <!-- extract indices... these two nodelets use the indices produced by the
       planar model extraction to build two new point clouds (the inliers and
       outliers of the model). The `~negative` private parameter in the second
       nodelet is what causes it to produce the outliers instead of the inliers.
       Note that both nodelets need the `approximate_sync` private parameter set
       to true. These nodelets have two subscribers (one for the indices and one
       for the cloud), and both subscribers are bound to a single callback using
       a `message_filters::Synchronizer`. Through this mechanism, the callback
       is only run when both topics are available, and the received messages are
       both passed to this callback. The `approximate_sync` parameter being
       `true` causes the subscribers to be bound using a
       `sync_policies::ApproximateTime` synchronization strategy (as opposed to
       a `sync_policies::ExactTime` strategy). We need the approximate time
       strategy because the time that the indices are published does not line up
       with the time that the point cloud is published. Using exact time
       strategy results in the callback only running occasionally (when you are
       lucky enough that two topics line up in time).
       -->
  <group ns="extract_indices" >
    <node pkg="nodelet" type="nodelet" name="extract_inliers" args="load pcl/ExtractIndices /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <remap from="~indices" to="/normal_segmentation/segmentation/inliers" />
      <param name="approximate_sync" value="true" />
    </node>
    <node pkg="nodelet" type="nodelet" name="extract_outliers" args="load pcl/ExtractIndices /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <remap from="~indices" to="/normal_segmentation/segmentation/inliers" />
      <param name="negative" value="true" />
      <param name="approximate_sync" value="true" />
    </node>
  </group>

  <!-- pass through filter 2.... Add another pass-through filter that removes
       points below the plane extracted above. We start a node that offers a
       service that, when called, sends the transform from
       `camera_depth_optical_frame` to `table_frame`. Setting `~input_frame`
       private parameter to `table_frame` allows us to tune the parameters in an
       intuitive coordinate system. Since the `table_frame` coordinate system
       sits on the table surface with its y axis pointed down, all points with a
       negative y coordinate are above the surface. -->
  <group ns="table_cutoff" >
    <node pkg="nodelet_pcl_demo" type="table_cutoff_settings.py" name="table_cutoff_settings" output="screen"
          respawn="true" />
    <node pkg="nodelet" type="nodelet" name="cutoff" args="load pcl/PassThrough /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <rosparam>
        input_frame: table_frame
        filter_field_name: y
        filter_limit_min: -3.0
        filter_limit_max: 0.0
      </rosparam>
      <param if="$(eval source=='realsense')" name="filter_limit_negative" value="true" />
    </node>
  </group>

  <!-- statistical outlier... Perform statistical outlier removal of the
       non-table cloud, this helps to remove random stray points that may exist
       in the point cloud -->
  <group ns="outlier">
    <node pkg="nodelet" type="nodelet" name="cutoff" args="load pcl/StatisticalOutlierRemoval /pcl_manager" output="screen">
      <remap from="~input" to="/table_cutoff/cutoff/output" />
      <rosparam>
        mean_k: 10
        stddev: 0.01
      </rosparam>
    </node>
  </group>

  <!-- cluster extraction... Extract the clusters of whatever is left on the
       table. Right now, the max number of clusters is hard coded to be 3. -->
  <node pkg="nodelet_pcl_demo" name="cluster_extraction" type="cluster_extractor" output="screen" />

<arg if="$(arg gl300)" name="gl" value="--opengl 300" />
<arg unless="$(arg gl300)" name="gl" value="" />
  <!-- start rviz if vis arg is true -->
  <node pkg="rviz" type="rviz" respawn="false" name="rviz" if="$(arg vis)"
        args="$(arg gl) -d $(find nodelet_pcl_demo)/launch/nodelet_demo.rviz" />

</launch>
